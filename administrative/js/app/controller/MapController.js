// Generated by CoffeeScript 1.3.3

Ext.define("MsAdmin.controller.MapController", {
  extend: "Ext.app.Controller",
  views: ["sensor.Sensor", "map.MapLayout"],
  refs: [
    {
      ref: "MapLayout",
      selector: "MapLayout"
    }
  ],
  init: function() {
    this.control({
      "[ref=\"savePosButton\"]": {
        click: this.onSavePositionClick
      },
      "[ref=\"MapZoomSlider\"]": {
        change: this.doMapZoom
      }
    });
    MsAdmin.Event.on("server.selected", this.renderSensors, this);
    MsAdmin.Event.on("sensor.highlight", this.highlightSensor, this);
    MsAdmin.Event.on("map.sensor.add", this.addSensor, this);
    MsAdmin.Event.on("sensor.destroyed", this.removeSensor, this);
    return MsAdmin.Event.on("sensor.updateVisibility", this.updateSensorVisibility, this);
  },
  doMapZoom: function(field) {
    var mapBox, toConfig, value;
    value = field.getValue();
    mapBox = this.getMapLayout().down("[ref=\"map\"]");
    toConfig = {
      width: (mapBox.origin.width + value) + "%",
      height: (mapBox.origin.height + value) + "%"
    };
    return mapBox.animate({
      to: toConfig,
      duration: 0
    });
  },
  onSavePositionClick: function() {
    return this.server.sensors().sync();
  },
  updateSensorVisibility: function(model) {
    return this.eachSensor(function(item) {
      if (item.getModel() === model) {
        if (model.get("active") === 1) {
          item.getEl().show();
          return item.getEl().frame("red", 1);
        } else {
          if (item.getEl().isVisible()) {
            item.getEl().frame("black", 1);
            return setTimeout((function() {
              return item.getEl().hide();
            }), 1000);
          }
        }
      }
    });
  },
  addSensor: function(sensor) {
    var exists, item;
    exists = false;
    this.eachSensor(function(item) {
      if (sensor === item.getModel()) {
        exists = true;
        return false;
      }
    });
    if (exists) {
      MsAdmin.Event.fire("notice", {
        msg: MsAdmin.t("Sensor is already on map")
      });
      return false;
    }
    item = this.getMapLayout().add({
      xtype: "Sensor",
      model: sensor
    });
    if (!sensor.get("active")) {
      return item.hide();
    }
  },
  removeSensor: function(model) {
    return this.eachSensor(function(item) {
      if (item.getModel() === model) {
        item.getEl().frame("black", 1);
        return setTimeout((function() {
          return item.destroy();
        }), 1000);
      }
    });
  },
  renderSensors: function(server) {
    this.server = server;
    Ext.each(this.getMapLayout().query("Sensor"), function(item) {
      return item.destroy();
    });
    return server.sensors().each((function(sensor) {
      return this.addSensor(sensor);
    }), this);
  },
  /*
    highlight selected sensor
  */

  highlightSensor: function(sensor) {
    return this.eachSensor(function(item) {
      if (item.getModel() === sensor) {
        item.getEl().isVisible() && item.getEl().frame("red");
      }
    });
  },
  eachSensor: function(fn) {
    return Ext.each(this.getMapLayout().query("Sensor"), fn, this);
  }
});
