// Generated by CoffeeScript 1.3.3

Ext.define("app.controller.SensorController", {
  extend: "Ext.app.Controller",
  mixins: ["app.mixins.FormControllerMixin"],
  views: ["sensor.SensorList", "sensor.SensorViewWindow", "sensor.SensorListPanel"],
  stores: ["Sensors"],
  models: ["Sensor"],
  refs: [
    {
      ref: "Viewport",
      selector: "Viewport"
    }, {
      ref: "SensorList",
      selector: "SensorList"
    }
  ],
  init: function() {
    return this.control({
      SensorList: {
        itemclick: this.onListItemClick,
        editiconclick: this.onEditIconClick
      },
      "SensorListPanel [ref=\"addButton\"]": {
        click: this.onAddButtonClick
      },
      "SensorListPanel [ref=\"deleteButton\"]": {
        click: this.onDeleteButtonClick
      },
      "SensorViewWindow[ref=\"create\"] [ref=\"saveButton\"]": {
        click: this.createSensor
      }
    });
  },
  onListItemClick: function(grid, model) {},
  onAddButtonClick: function() {
    !this.createWindow && (this.createWindow = this.getView("sensor.SensorViewWindow").create({
      ref: "create",
      title: "New Sensor Creation",
      renderTo: this.getViewport().getCenter().getEl()
    }));
    return app.Event.fire("server.current", {
      callback: function(server) {
        var model;
        model = Ext.create("app.model.Sensor", {
          serverId: server.get("id")
        });
        this.createWindow.getForm().loadRecord(model);
        this.createWindow.center();
        return this.createWindow.show();
      },
      scope: this
    });
  },
  createSensor: function() {
    var errors, form, model;
    form = this.createWindow.getForm();
    model = form.getRecord();
    form.updateRecord(model);
    errors = model.validate();
    if (errors.isValid() === false) {
      form.markInvalid(errors);
      return;
    }
    return model.save({
      success: this.onSensorSaveSuccess,
      failure: this.onSensorSaveFailure,
      scope: this
    });
  },
  onSensorSaveSuccess: function(model) {
    var server;
    server = this.getStore("Servers").findRecord("id", model.get("serverId"));
    server.sensors().add(model);
    this.createWindow.close();
    return app.Event.fire("notice", {
      msg: "Sensor was successfully created"
    });
  },
  onSensorSaveFailure: function(model, operation) {
    var errors, form;
    errors = operation.getError();
    form = this.createWindow.getForm();
    return this.markInvalid(form, errors);
  },
  onDeleteButtonClick: function() {
    var model;
    model = this.getSensorList().getSelectionModel().getSelection()[0];
    return Ext.Msg.confirm("Delete A Sensor", "Are you really want to delete sensor", (function() {
      return this.onDeleteSensorConfirm(model);
    }), this);
  },
  onDeleteSensorConfirm: function(model) {
    return model.destroy({
      success: this.onSensorDestroySuccess,
      failure: this.onSensorDestroyFailure,
      scope: this
    });
  },
  onSensorDestroySuccess: function(model, operation) {
    model = operation.request.records[0];
    model.store.remove(model);
    return app.Event.fire("notice", {
      msg: "Sensor was successfully removed"
    });
  },
  onSensorDestroyFailure: function(model, operation) {
    return app.Event.fire("notice", {
      msg: "Could't not remove server"
    });
  },
  onEditIconClick: function(model, rIdx, cIdx) {
    !this.editWindow && (this.editWindow = this.getView("sensor.SensorViewWindow").create({
      renderTo: this.getViewport().getCenter().getEl(),
      ref: "edit"
    }));
    this.editWindow.loadModel(model);
    this.editWindow.center();
    return this.editWindow.show();
  }
});
