// Generated by CoffeeScript 1.3.3

Ext.define("MsAdmin.view.server.ServerGraphicWindow", {
  extend: "Ext.window.Window",
  border: false,
  alias: "widget.ServerGraphicWindow",
  constrain: true,
  autoShow: true,
  minimizable: true,
  maximizable: true,
  closeAction: "hide",
  modal: true,
  requires: ["MsAdmin.view.server.TemperatureGraphic"],
  constructor: function(config) {
    var size;
    size = .95;
    return this.callParent([
      Ext.applyIf(config || {}, {
        layout: "fit",
        listeners: {
          beforeshow: function() {
            return this.setSize(Ext.getBody().getViewSize().width * size, Ext.getBody().getViewSize().height * size);
          },
          show: function() {
            return this.center();
          }
        },
        dockedItems: this.getCmpDockedItems(),
        items: this.getCmpItems(),
        buttons: this.getCmpButtons()
      })
    ]);
  },
  getSeriesConfig: function(fields) {
    var series;
    series = [];
    Ext.each(fields, function(serial) {
      return series.push({
        type: "line",
        highlight: {
          size: 7,
          radius: 7
        },
        axis: "left",
        xField: "name",
        fill: false,
        yField: serial,
        markerConfig: {
          type: "cross",
          size: 4,
          radius: 4,
          "stroke-width": 0
        }
      });
    });
    return series;
  },
  loadModel: function(model) {
    var chart, fields, sensorCombo;
    this.model = model;
    sensorCombo = this.down("[ref='SensorCombo']");
    this.setTitle("Server " + model.get("name"));
    this.removeAll(true);
    fields = [];
    model.sensors().each(function(sensor) {
      return fields.push(sensor.get("serial"));
    });
    this.storeFields = fields;
    chart = this.add({
      xtype: "TemperatureGraphic",
      style: "background:#fff",
      animate: true,
      shadow: true,
      legend: {
        position: "right"
      },
      axes: [
        {
          type: "Numeric",
          minimum: 0,
          position: "left",
          fields: fields,
          title: "Temperature",
          minorTickSteps: 1,
          grid: {
            odd: {
              opacity: 1,
              fill: "#ddd",
              stroke: "#bbb",
              "stroke-width": 0.5
            }
          }
        }, {
          type: "Category",
          position: "bottom",
          fields: ["name"],
          title: "Time axes",
          label: {
            rotate: {
              degrees: 315
            }
          }
        }
      ],
      series: this.getSeriesConfig(fields),
      store: (function() {
        var store;
        store = Ext.create("Ext.data.Store", {
          fields: (function() {
            var modelFields;
            modelFields = [];
            Ext.each(fields, function(field) {
              return modelFields.push({
                name: field,
                type: "float"
              });
            });
            return modelFields;
          })().concat(["name"]),
          proxy: {
            type: "ajax",
            url: "/admin/chart",
            reader: {
              type: "json",
              root: "items"
            },
            extraParams: {
              filter: Ext.encode({
                startDate: Ext.Date.format(new Date(Ext.Date.now() - 1000 * 60 * 120), "Y-m-d H:i:s"),
                endDate: Ext.Date.format(new Date(), "Y-m-d H:i:s"),
                sensorIds: (function() {
                  var ids;
                  ids = [];
                  model.sensors().each(function(sensor) {
                    return ids.push(sensor.get("sensorId"));
                  });
                  return ids;
                })()
              })
            }
          },
          autoLoad: true
        });
        return store;
      })()
    });
    return chart.store.getProxy().extraParams = {};
  },
  getCmpDockedItems: function() {
    return [
      {
        xtype: "toolbar",
        ref: "filter",
        items: [
          "->", {
            xtype: "datefield",
            ref: "filterField",
            als: "startDateField",
            format: "Y-m-d",
            fieldLabel: "Start date",
            value: new Date(Ext.Date.now() - 1000 * 60 * 120)
          }, " ", {
            xtype: "datefield",
            als: "endDateField",
            ref: "filterField",
            format: "Y-m-d",
            fieldLabel: "End date",
            value: new Date()
          }, " ", {
            xtype: "timefield",
            als: "startTimeField",
            ref: "filterField",
            fieldLabel: "Start time",
            format: "H:i",
            increment: 30,
            value: new Date(Ext.Date.now() - 1000 * 60 * 120)
          }, {
            xtype: "timefield",
            als: "endTimeField",
            ref: "filterField",
            format: "H:i",
            increment: 30,
            fieldLabel: "End time",
            value: new Date()
          }, "->", {
            xtype: "button",
            text: "Render",
            scope: this,
            handler: this.onRenderButtonClick,
            ref: "renderGraphicsButton"
          }
        ]
      }
    ];
  },
  onRenderButtonClick: function(button) {
    var chart, fields, sensorIds, sensors, store, toolbar;
    toolbar = button.up("toolbar");
    chart = button.up("window").down("TemperatureGraphic");
    store = chart.store;
    sensors = this.model.sensors();
    sensorIds = [];
    fields = this.storeFields;
    chart.series.each((function(item, index) {
      var sensorId, serial;
      serial = fields[index];
      sensorId = sensors.getAt(sensors.findExact("serial", serial)).get("sensorId");
      return sensorIds.push(sensorId);
    }), this);
    store.getProxy().extraParams = {};
    return store.load({
      params: {
        filter: Ext.encode({
          startDate: this.getStartDate(),
          endDate: this.getEndDate(),
          sensorIds: sensorIds
        })
      },
      callback: (function(store) {
        return function(me) {
          if (store.getCount() === 0) {
            return store.removeAll();
          }
        };
      })(store)
    });
  },
  getStartDate: function() {
    var endDate, endTime, startDate, startTime, toolbar;
    toolbar = this.down("toolbar[ref='filter']");
    startDate = toolbar.down("[als=startDateField]").getValue();
    startTime = toolbar.down("[als=startTimeField]").getValue();
    endDate = toolbar.down("[als=endDateField]").getValue();
    endTime = toolbar.down("[als=endTimeField]").getValue();
    return Ext.Date.format(startDate, "Y-m-d") + " " + Ext.Date.format(startTime, "H:i:s");
  },
  getEndDate: function() {
    var endDate, endTime, startDate, startTime, toolbar;
    toolbar = this.down("toolbar[ref='filter']");
    startDate = toolbar.down("[als=startDateField]").getValue();
    startTime = toolbar.down("[als=startTimeField]").getValue();
    endDate = toolbar.down("[als=endDateField]").getValue();
    endTime = toolbar.down("[als=endTimeField]").getValue();
    return Ext.Date.format(endDate, "Y-m-d") + " " + Ext.Date.format(endTime, "H:i:s");
  },
  getCmpItems: function() {
    return [];
  },
  getCmpButtons: function() {
    return [
      {
        ref: "generateXLSBtn",
        text: "Generate XLS",
        scope: this,
        handler: this.generateXLS
      }, {
        ref: "generateBtn",
        text: "Generate PDF",
        scope: this,
        handler: this.generateGpaphic
      }, {
        ref: "closeBtn",
        text: "Close",
        handler: function(button) {
          return button.up("window").close();
        }
      }
    ];
  },
  generateXLS: function() {
    debugger;
    var chart, fields, filters, model, sensors;
    chart = this.down("chart");
    fields = this.storeFields;
    filters = [];
    model = this.model;
    sensors = model.sensors();
    chart.series.each((function(item, index) {
      var sensorId, serial;
      if (item.visibleInLegend()) {
        serial = fields[index + 1];
        sensorId = sensors.getAt(sensors.findExact("serial", serial)).get("sensorId");
        return filters.push(sensorId);
      }
    }), this);
    return Ext.Ajax.request({
      url: "/chart/generate/xls",
      params: {
        startDate: this.getStartDate(),
        endDate: this.getEndDate(),
        filter: Ext.encode({
          sensorIds: filters
        })
      },
      success: function(response) {
        var result;
        result = Ext.decode(response, true);
        if (result != null) {
          return window.location = result.src;
        }
      }
    });
  },
  generateGpaphic: function() {
    var chart, fields, filters, model, sensors;
    chart = this.down("chart");
    fields = this.storeFields;
    filters = [];
    model = this.model;
    sensors = model.sensors();
    chart.series.each((function(item, index) {
      var sensorId, serial;
      if (item.visibleInLegend()) {
        serial = fields[index + 1];
        sensorId = sensors.getAt(sensors.findExact("serial", serial)).get("sensorId");
        return filters.push(sensorId);
      }
    }), this);
    return Ext.Ajax.request({
      url: "/chart/generate/pdf",
      params: {
        startDate: this.getStartDate(),
        endDate: this.getEndDate(),
        filter: Ext.encode({
          sensorIds: filters
        })
      },
      success: function(response) {
        var result;
        result = Ext.decode(response, true);
        if (result != null) {
          return window.location = result.src;
        }
      }
    });
  },
  getForm: function() {
    return this.down("form").getForm();
  }
});
